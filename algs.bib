% General papers on algorithms, complexity of algorithms, and data structures.

@article{finkel1974quad,
  title={Quad trees a data structure for retrieval on composite keys},
  author={Finkel, Raphael A. and Bentley, Jon Louis},
  journal={Acta informatica},
  volume={4},
  number={1},
  pages={1--9},
  year={1974},
  publisher={Springer}
}


@inproceedings{schutzrendering,
  title={Rendering Large Point Clouds in Web Browsers},
  author={Sch{\"u}tz, Markus},
  booktitle={Proceedings of CESCG 2015: The 19th Central European Seminar on Computer Graphics}
}


@TECHREPORT {clifford-04,
   author = {Peter Clifford and Rapha{\"{e}}l Clifford and Costas Iliopoulos},
   title = {Fourier transform methods for $\delta$ and ($\delta$,$\gamma$) matching and other
measures of string similarity},
   number = {TR-04-09},
   institution = {King's College London},
   month = {July},
   year = {2004}
} 


@incollection {clifford-05,
   author = {Peter Clifford and Rapha{\"{e}}l Clifford and Costas Iliopoulos},
   title = {Faster Algorithms for $\delta$, $\gamma$-Matching and Related Problems},
   booktitle = {Combinatorial Pattern Matching},
   series = {Lecture Notes in Computer Science},
   publisher = {Springer Berlin Heidelberg},
   pages = {71-90},
   volume = {3537},
   year = {2005}
}

@incollection{clifford-07,
title 	= {Self-normalised Distance with Don't Cares},
author 	= {Peter Clifford and Rapha{\"e}l Clifford},
booktitle = {Combinatorial Pattern Matching},
volume  = {4580},
series  = {Lecture Notes in Computer Science},
editor  = {Ma, Bin and Zhang, Kaizhong},
publisher = {Springer Berlin Heidelberg},
pages   = {63-70},
year 	= {2007},
}

@article{Blum-1973,
title 	= {Time bounds for selection},
author 	= {Manuel Blum and Robert W. Floyd and Vaughan Pratt and Ronald L. Rivest and Robert E. Tarjan},
journal	= {Journal of Computer and System Sciences},
volume 	= {7},
number 	= {4},
pages 	= {448--461},
year 	= {1973},
}


@article{Schonhage-1976,
title 	= {Finding the median},
author 	= {Arnold Sch\"onhage and Mike Paterson and Nicholas Pippenger},
journal = {Journal of Computer and System Sciences},
volume 	= {13},
number 	= {2},
pages 	= {184--199},
year 	= {1976},
}


@Book{Aho-Hopcroft-Ullman-1974,
  AUTHOR        = {Alfred V. Aho and John E. Hopcroft and Jeffrey D. Ullman},
  TITLE         = {The Design and Analysis of Computer Algorithms},
  PUBLISHER     = {Addison-Wesley},
  YEAR          = 1974
}

@Article{Atkinson-Sack-Santoro-Strothotte-1986,
  AUTHOR        = {M. D. Atkinson and J.-R. Sack and N. Santoro and
                   T. Strothotte},
  AUTHORABBREV  = {correct},
  TITLE         = {Min-Max Heaps and Generalized Priority Queues},
  JOURNAL       = {Communications of the ACM},
  YEAR          = 1986,
  VOLUME        = 29,
  NUMBER        = 10,
  PAGES         = {996--1000},
  MONTH         = {October},

  ABSTRACT = {
    A simple implementation of double-ended priority queues is presented.  The
    proposed structure, called a min-max heap, can be built in linear time; in
    contrast to conventional heaps, it allows both FindMin and FindMax to be
    performed in constant time; Insert, DeleteMin, and DeleteMax operations can
    be performed in linear time.

    Min-max heaps can be generalized to support other similar order-statistics
    operations efficiently (e.g., constant time FindMedian and logarithmic
    time DeleteMedian); furthermore, the notion of min-max ordering can be
    extended to other heap-ordered structures, such as leftist trees.
  }
}

@InProceedings{Bayer-McCreight-1970,
    AUTHOR      = "R. Bayer and E. McCreight",
    TITLE       = "Organization and Maintenance of Large Ordered Indices",
    BOOKTITLE   = "Record of the 1970 ACM SICFIDET Workshop on Data
                   Description and Access",
    ADDRESS     = "Houston, Texas",
    MONTH       = "November",
    YEAR        = 1970,
    PAGES       = "107--141",

    REVIEW = {
        Also Mathematical and Information Sciences Report No.~20, Mathematical
        and Information Sciences Laboratory, Boeing Scientific Research
        Laboratories, July 1970.  Discusses the optimal choice for the arity
        of B-tree nodes, depending on the number of keys, both in theory and
        in practice (experimental results).  Claims ``near-optimal.''
    }
}

@Book{Bentley-2000,
  AUTHOR        = {Jon Bentley},
  TITLE         = {Programming Pearls},
  PUBLISHER     = {Addison-Wesley, Inc.},
  YEAR          = 2000,
  EDITION       = {2nd},
}

@Article{Bentley-Yao-1976,
  AUTHOR        = {Jon Louis Bentley and Andrew Chi-Chih Yao},
  TITLE         = {An Almost Optimal Algorithm for Unbounded Searching},
  JOURNAL       = {Information Processing Letters},
  YEAR          = 1976,
  VOLUME        = 5,
  NUMBER        = 3,
  PAGES         = {82--87},
  MONTH         = {August}
}

@InProceedings{Brodnik-1993,
  AUTHOR        = {Andrej Brodnik},
  TITLE         = {Computation of the Least Significant Set Bit},
  BOOKTITLE     = {Proceedings of the 2nd Electrotechnical and Computer Science
                   Conference},
  VOLUME        = {B},
  YEAR          = 1993,
  PAGES         = {7--10},
  ADDRESS       = {Portoro\v{z}, Slovenia},
}

@Article{Burton-1982,
  AUTHOR        = {F. W. Burton},
  TITLE         = {An efficient functional implementation of {FIFO} queues},
  JOURNAL       = {Information Processing Letters},
  YEAR          = 1982,
  VOLUME        = 14,
  NUMBER        = 5,
  PAGES         = {205--206},
  MONTH         = {July}
}

@Article{Carlsson-1987,
  AUTHOR        = {Svante Carlsson},
  TITLE         = {The {D}eap---A double-ended heap to implement double-ended
                   priority queues},
  JOURNAL       = {Information Processing Letters},
  YEAR          = 1987,
  VOLUME        = 26,
  PAGES         = {33--36},
  MONTH         = {September},

  ABSTRACT = {
    This paper presents a symmetrical implicit double-ended queue
    implementation, which can be built in linear time.  The smallest and
    the largest element can be found in constant time, and deleted in
    logarithmic time.  This structure is an improvement of the MinMaxHeap
    presented by Atkinson et al. (1986).
    [Erik's note: \cite{Atkinson-Sack-Santoro-Strothotte-1986}]
  }
}

@Article{Carlsson-Chen-Strothotte-1989,
  AUTHOR        = {Svante Carlsson and Jingsen Chen and Thomas Strothotte},
  TITLE         = {A note on the construction of the data structure ``{D}eap''},
  JOURNAL       = {Information Processing Letters},
  YEAR          = 1989,
  VOLUME        = 31,
  PAGES         = {315--317},
  MONTH         = {June}
}

@Article{Chang-Du-1993,
  AUTHOR        = {S. C. Chang and M. W. Du},
  AUTHORABBREV  = {correct},
  TITLE         = {Diamond deque: A simple data structure for priority queues},
  JOURNAL       = {Information Processing Letters},
  YEAR          = 1993,
  VOLUME        = 46,
  PAGES         = {231--237},
  MONTH         = {July}
}

@Article{Colannino-Damian-Hurtado-Iacono-Meijer-Ramaswami-Toussaint-2006,
  author = {Justin Colannino and Mirela Damian and Ferran Hurtado and John Iacono and Henk Meijer and Suneeta Ramaswami and Godfried Toussaint},
  title = {An {$O(n \log n)$}-Time Algorithm for the Restriction Scaffold Assignment},
  journal = {Journal of Computational Biology},
  volume = 13,
  number = 4,
  pages = {979--989},
  month = {May},
  year = 2006,
}

@Article{Cole-1987-parametric,
  AUTHOR        = {Richard Cole},
  TITLE         = {Slowing Down Sorting Networks to Obtain
                   Faster Sorting Algorithms},
  JOURNAL       = {Journal of the ACM},
  VOLUME        = 34,
  NUMBER        = 1,
  MONTH         = {January},
  YEAR          = 1987,
  PAGES         = {200--208},
}

@Book{Cormen-Leiserson-Rivest-1990,
  AUTHOR        = {Thomas H. Cormen and Charles E. Leiserson and Ronald
                   L. Rivest},
  TITLE         = {Introduction to Algorithms},
  PUBLISHER     = {MIT Press},
  YEAR          = 1990
}

@Book{Cormen-Leiserson-Rivest-Stein-2001,
  AUTHOR        = {Thomas H. Cormen and Charles E. Leiserson and Ronald
                   L. Rivest and Clifford Stein},
  TITLE         = {Introduction to Algorithms},
  EDITION       = {2nd},
  PUBLISHER     = {MIT Press},
  YEAR          = 2001
}

@Book{Cormen-Leiserson-Rivest-Stein-2009,
  AUTHOR        = {Thomas H. Cormen and Charles E. Leiserson and Ronald
                   L. Rivest and Clifford Stein},
  TITLE         = {Introduction to Algorithms},
  EDITION       = {3rd},
  PUBLISHER     = {MIT Press},
  YEAR          = 2009
}

@PhDThesis{Crane72,
    AUTHOR      = "Clark Allan Crane",
    TITLE       = "Linear List and Priority Queues as Balanced Binary Trees",
    NUMBER      = "STAN-CS-72-259",
    SCHOOL      = "Computer Science Department, School of Humanities and
                   Sciences, Stanford University",
    MONTH       = "February",
    YEAR        = 1972,

    REVIEW = {
        Cited by Knuth's \emph{Art of Computer Programming}, vol.~3, as
        having developed algorithms for concatenation and splitting AVL
        trees.  Indeed, it gives it lots of detail (from an overview, to
        an informal description, to a formal program) on how to do this.
        It also cites~\cite{Bayer70} in an exercise (yes, a PhD thesis with
        exercises!) for converting these algorithms to 2-3 trees.
        Unfortunately, it doesn't cover anything about it.  My guess
        is that~\cite{Crane72} is the original papers on this topic.  This
        thesis also discusses algorithms for priority queues (mergable heaps),
        which is later described in~\cite{Aho74} for 2-3 trees.
    }
}

@Article{Erickson-1999-satisfiability,
  AUTHOR        = {Jeff Erickson},
  TITLE         = {Lower bounds for linear satisfiability problems},
  JOURNAL       = {Chicago Journal of Theoretical Computer Science},
  VOLUME        = 1999,
  NUMBER        = 8,
  YEAR          = 1999,
}

@InProceedings{Fredman-Saks-1989-cell,
  AUTHOR        = {Michael L. Fredman and Michael E. Saks},
  TITLE         = {The cell probe complexity of dynamic data structures},
  BOOKTITLE     = {Proceedings of the 21st Annual ACM Symposium on Theory of
                   Computing},
  PAGES         = {345--354},
  YEAR          = 1989,
  ADDRESS       = {Seattle, Washington},
  MONTH         = {May}
}

@Article{Fries-Mehlhorn-Naeher-Tsakalidis-1987,
  AUTHOR        = {O. Fries and K. Mehlhorn and S. N\"aher and A. Tsakalidis},
  authorabbrev  = {correct},
  TITLE         = {A $\log \log n$ Data Structure for Three-Sided Range
                   Queries},
  JOURNAL       = {Information Processing Letters},
  YEAR          = 1987,
  VOLUME        = 25,
  PAGES         = {269--273},
  MONTH         = {June}
}

@Article{Gabow-Tarjan-1985,
  AUTHOR        = {Harold N. Gabow and Robert E. Tarjan},
  TITLE         = {A linear-time algorithm for a special case of disjoint set
                   union},
  JOURNAL       = {Journal of Computer and System Sciences},
  YEAR          = 1985,
  VOLUME        = 30,
  NUMBER        = 2,
  PAGES         = {209--221},
  MONTH         = {April}
}

@InProceedings{Goodrich-Kloss-1999,
  AUTHOR        = {Michael T. Goodrich and John G. {Kloss II}},
  TITLE         = {Tiered Vector: An Efficient Dynamic Array for {JDSL}},
  BOOKTITLE     = {Proceedings of the 1999 Workshop on Algorithms and Data
                   Structures},
  YEAR          = 1999,
  ADDRESS       = {Vancouver, Canada},
  MONTH         = {August}
}
% will be an LNCS

@Book{Gries-1981,
  AUTHOR        = {David Gries},
  TITLE         = {The Science of Programming},
  PUBLISHER     = {Springer-Verlag},
  YEAR          = 1981
}

@Article{Hanson-Johnson-1996,
  AUTHOR        = {Eric N. Hanson and Theodore Johnson},
  TITLE         = {Selection Predicate Indexing for Active Databases Using
                   Interval Skip Lists},
  JOURNAL       = {Information Systems},
  YEAR          = 1996,
  VOLUME        = 21,
  NUMBER        = 3,
  MONTH         = {May},
  PAGES         = {269--298},
  abstract      = {A new, efficient selection predicate indexing scheme for
                   active database systems is introduced. The selection
                   predicate index proposed uses an interval index on an
                   attribute of a relation or object collection when one or
                   more rule condition clauses are defined on that
                   attribute. The selection predicate index uses a new type of
                   interval index called the interval skip list (IS-list). The
                   IS-list is designed to allow efficient retrieval of all
                   intervals that overlap a point, while allowing dynamic
                   insertion and deletion of intervals. IS-list algorithms are
                   described in detail. The IS-list allows efficient on-line
                   searches, insertions, and deletions, yet is much simpler to
                   implement than other comparable interval index data
                   structures such as the priority search tree and balanced
                   interval binary search tree (IBS-tree). IS-lists require
                   only one third as much code to implement as balanced
                   IBS-trees. The combination of simplicity, performance, and
                   dynamic updateability of the IS-list is unmatched by any
                   other interval index data structure. This makes the IS-list
                   a good interval index structure for implementation in an
                   active database predicate index.},
  keywords      = {Active Databases, Triggers, Predicate Indexing, Interval
                   Skip Lists, Discrimination Networks}
}

@Article{Harel-Tarjan-1984,
  AUTHOR        = {Dov Harel and Robert Endre Tarjan},
  TITLE         = {Fast algorithms for finding nearest common ancestors},
  JOURNAL       = {SIAM Journal on Computing},
  VOLUME        = 13,
  NUMBER        = {2},
  PAGES         = {338--355},
  YEAR          = 1984,
  MONTH         = {May},
  ABSTRACT      = {We consider the following problem: Given a collection of
                   rooted trees, answer on--line queries of the form, What is
                   the nearest common ancestor of the vertices $x$ and $y$?  We
                   show that any pointer machine that solves this problem
                   requires $\Omega(\log \log n)$ time per query in the worst
                   case, where $n$ is the total number of vertices in the
                   tree. On the other hand, we present an algorithm for a
                   random access machine with uniform cost measure (and a bound
                   of $O(\log n)$ on the number of bits per word) that
                   requires $O(1)$ time per query and $O(n)$ preprocessing
                   time, assuming that the collection of trees is static. For a
                   version of the problem in which the trees can change between
                   queries, we obtain an almost-linear-time (and
                   linear-space) algorithm.}
}

@TechReport{Henzinger-King-1997,
  AUTHOR        = {Monika Rauch Henzinger and Valerie King},
  TITLE         = {Fully dynamic 2-edge connectivity algorithm in
                   polylogarithmic time per operation},
  TYPE          = {Technical Note},
  INSTITUTION   = {Digital SRC},
  NUMBER        = {1997-004a},
  MONTH         = {June},
  YEAR          = 1997,
  NOTE          = {A preliminary version appeared in \emph{Proceedings of the
                   27th Annual ACM Symposium on Theory of Computing}, Las
                   Vegas, Nevada, May 1995, pp.~519--527.},
  also          = {STOC title was slightly different: ``Randomized dynamic
                   graph algorithms with polylogarithmic time per operation.''},
}

@InProceedings{Holm-deLichtenberg-Thorup-1998,
  AUTHOR        = {Jacob Holm and Kristian de Lichtenberg and Mikkel Thorup},
  TITLE         = {Poly-logarithmic deterministic fully-dynamic graph
                   algorithms for connectivity, minimum spanning tree, 2-edge,
                   and biconnectivity},
  BOOKTITLE     = {Proceedings of the 13th Annual ACM Symposium on Theory of
                   Computing},
  PAGES         = {79--89},
  YEAR          = 1998,
  also          = {``Poly-logarithmic deterministic fully-dynamic graph
                   algorithms {II}: 2-edge and biconnectivity,'' Technical
                   Report DIKU-TR-97/26, Department of Computer Science,
                   University of Copenhagen, November 1997}
}

@Article{Hood-Melville-1981,
  AUTHOR        = {R. Hood and R. Melville},
  TITLE         = {Real-time queue operations in pure {Lisp}},
  JOURNAL       = {Information Processing Letters},
  YEAR          = 1981,
  VOLUME        = 13,
  NUMBER        = 2,
  PAGES         = {50--53},
  MONTH         = {November}
}

@Book{Knuth-1968,
  AUTHOR        = {Donald E. Knuth},
  TITLE         = {The Art of Computer Programming},
  PUBLISHER     = {Addison-Wesley},
  YEAR          = 1968
}

@Book{Knuth-1968-volume-3,
  AUTHOR        = {Donald E. Knuth},
  TITLE         = {The Art of Computer Programming},
  VOLUME        = {3 (Sorting and Searching)},
  PUBLISHER     = {Addison-Wesley},
  YEAR          = 1968
}

@Book{Knuth-1998-volume-3,
  AUTHOR        = {Donald E. Knuth},
  TITLE         = {The Art of Computer Programming},
  EDITION       = {Second},
  VOLUME        = {3 (Sorting and Searching)},
  PUBLISHER     = {Addison-Wesley},
  YEAR          = 1968
}

@InProceedings {Lipton97,
    AUTHOR      = "Richard J. Lipton and Paul J. Martino and Andy Neitzke",
    TITLE       = "On the Complexity of a Set-Union Problem",
    BOOKTITLE   = "Proceedings of the 38th Annual IEEE Computer Society
                   Conference on Foundations of Computer Science (FOCS'97)",
    MONTH       = "October",
    YEAR        = 1997,
    ADDRESS     = "Miami Beach, Florida",
    PAGES       = "110--115",

    REVIEW = {
        Considers the problem of maintaining a family of sets subject to
        creating singleton sets, compute the union of two existing sets,
        and testing whether a given element in a particular set (membership
        query).  Note that union is not destructive (unlike union-find);
        you can union $B$ and $A$ and later union $C$ and the same $A$.
        The obvious algorithm (linear-time merge) takes $O(n^2)$ time for
        $n$ operations.  Proves that this is optimal under a restricted
        model (specifying where cost can be attributed; seems somewhat flat
        and perhaps not completely general, though claims it is natural)
        when all creates and unions come before all finds.  If this bound
        doesn't hold for randomized algorithms, it would imply a nice result
        on the size of ``segregators'' in bounded-degree DAGs.  Shows that you
        can do better ($O(n^2/\lg\lg n)$ time) for the ``parallel'' problem,
        where creates and unions come in $O(\lg n)$ stages and at each stage
        all unions only depend on sets constructed in previous stages.
    }
}

@Article{McCreight-1985,
  AUTHOR        = {Edward M. McCreight},
  TITLE         = {Priority Search Trees},
  JOURNAL       = {SIAM Journal on Computing},
  YEAR          = 1985,
  VOLUME        = 14,
  NUMBER        = 2,
  PAGES         = {257--276},
  MONTH         = {May}
}

@article{Megiddo-1983-parametric,
    AUTHOR = {Megiddo, Nimrod},
     TITLE = {Applying parallel computation algorithms in the design of
              serial algorithms},
  sJOURNAL = {J. Assoc. Comput. Mach.},
   JOURNAL = {Journal of the Association for Computing Machinery},
    VOLUME = {30},
      YEAR = {1983},
    NUMBER = {4},
     PAGES = {852--865},
      ISSN = {0004-5411},
     CODEN = {JACOAH},
   MRCLASS = {68Q20 (68R10)},
  MRNUMBER = {MR819134},
}

@Book{Mehlhorn-1984-volume-1,
  AUTHOR        = {Kurt Mehlhorn},
  TITLE         = {Data Structures and Algorithms},
  PUBLISHER     = {Springer-Verlag},
  YEAR          = 1984,
  VOLUME        = {1 (Sorting and Searching)}
}

@Article{Munro-Suwanda-1980,
  AUTHOR        = {J. Ian Munro and Hendra Suwanda},
  TITLE         = {Implicit Data Structures for Fast Search and Update},
  JOURNAL       = {Journal of Computer and System Sciences},
  YEAR          = 1980,
  VOLUME        = 21,
  NUMBER        = 2,
  PAGES         = {236--250},
  MONTH         = {October}
}

@Article{Okasaki-1995,
  AUTHOR        = {Chris Okasaki},
  TITLE         = {Simple and efficient purely functional queues},
  JOURNAL       = {Journal of Functional Programming},
  YEAR          = 1995,
  VOLUME        = 5,
  NUMBER        = 4,
  PAGES         = {583--592},
  MONTH         = {October}
}

@TechReport{ResizableArraysTR,
  AUTHOR        = {Andrej Brodnik and Svante Carlsson and Erik D. Demaine and
                   J. Ian Munro and Robert Sedgewick},
  TITLE         = {Resizable Arrays in Optimal Time and Space},
  INSTITUTION   = {Department of Computer Science, University of Waterloo},
  YEAR          = 1999,
  NUMBER        = {CS-99-09}
}

@InProceedings{Brodnik-Carlsson-Demaine-Munro-Sedgewick-1999,
  AUTHOR        = {Andrej Brodnik and Svante Carlsson and Erik D. Demaine and
                   J. Ian Munro and Robert Sedgewick},
  TITLE         = {Resizable Arrays in Optimal Time and Space},
  BOOKTITLE     = {Proceedings of the 1999 Workshop on Algorithms and Data
                   Structures},
  YEAR          = 1999,
  ADDRESS       = {Vancouver, Canada},
  MONTH         = {August}
}

@Book{Overmars-1983,
  AUTHOR        = {Mark H. Overmars},
  TITLE         = {The Design of Dynamic Data Structures},
  PUBLISHER     = {Springer-Verlag},
  YEAR          = 1983,
  VOLUME        = 156,
  SERIES        = {Lecture Notes in Computer Science}
}

@Book{Sedgewick-1998,
  AUTHOR        = {Robert Sedgewick},
  TITLE         = {Algorithms in C},
  PUBLISHER     = {Addison-Wesley},
  YEAR          = 1997,
  EDITION       = {3rd}
}

@TechReport{Shiloach79,
  AUTHOR        = {Yossi Shiloach},
  TITLE         = {Union-Member Algorithms for Non-disjoint Sets},
  NUMBER        = {STAN-CS-79-728},
  INSTITUTION   = {Computer Science Department, School of Humanities and
                   Sciences, Stanford University},
  MONTH         = {January},
  YEAR          = 1979
}

@InProceedings{Spira-1971,
  AUTHOR        = {P. M. Spira},
  TITLE         = {Complete Linear Proofs of Systems of Linear Inequalities},
  BOOKTITLE     = {Proceedings of the 12th Annual Symposium on Switching and
                   Automata Theory},
  PAGES         = {202--206},
  YEAR          = 1971,
  MONTH         = {October}
}

@Book{Tarjan-1983,
  AUTHOR        = {Robert Endre Tarjan},
  TITLE         = {Data Structures and Network Algorithms},
  PUBLISHER     = {Society for Industrial and Applied Mathematics},
  YEAR          = 1983
}
